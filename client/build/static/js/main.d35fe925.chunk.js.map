{"version":3,"sources":["components/NavBar/index.js","components/Jumbotron/index.js","components/SearchBar/index.js","components/Buttons/index.js","components/BookCard/index.js","utils/API.js","pages/Home.js","pages/Saved.js","App.js","registerServiceWorker.js","index.js"],"names":["Navbar","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","href","Jumbotron","SearchBar","props","name","placeholder","onChange","handleInputChange","onClick","handleFormSubmit","Button","target","children","role","data-id","BookCard","image","title","authors","description","link","handleSave","handleDelete","style","maxWidth","src","alt","event","query","axios","get","bookToSave","post","delete","Home","useState","savedBooks","setSavedBooks","results","setResults","setTitle","useEffect","API","then","res","data","a","preventDefault","bookID","getAttribute","targetBook","filter","book","volumeInfo","imageLinks","thumbnail","infoLink","console","log","newState","push","NavBar","value","items","catch","err","map","key","canonicalVolumeLink","Saved","_id","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d35fe925.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-info\">\r\n            <p className=\"navbar-brand\">Google Books</p>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item active\">\r\n                        <a className=\"nav-link\" href=\"/\">Search</a>\r\n                    </li>\r\n                    <li className=\"nav-item active\">\r\n                        <a className=\"nav-link\" href=\"/saved\">Your Saved Books</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>)\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nconst Jumbotron = () => {\r\n    return (\r\n        <div className='jumbotron jumbotron-fluid bg-info text-white'>\r\n            <h1 className=\"display-4\">Google Book Search</h1>\r\n            <p className=\"lead\">Search for your favorite books</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Jumbotron","import React from 'react';\r\n\r\nconst SearchBar = (props) => {\r\n\r\n    return (\r\n        <div id='search-form' className='text-center'>\r\n            <input className='form-control' name='title'\r\n                placeholder='Search for a book...'\r\n                type='text'\r\n                onChange={props.handleInputChange}></input>\r\n            <br />\r\n            <button\r\n                className='btn btn-info'\r\n                onClick={props.handleFormSubmit}\r\n                type='submit'\r\n            >   Search\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar","import React from 'react';\r\n\r\nconst Button = (props) => {\r\n    if (props.href) {\r\n        return (\r\n            <button className='btn btn-info btn-lg btn-block'>\r\n                <a href={props.href} target=\"_blank\">{props.children}</a>\r\n            </button>\r\n        )\r\n    }\r\n    else if (props.onClick) {\r\n        return (\r\n            <button\r\n                className={props.type}\r\n                role=\"button\"\r\n                onClick={props.onClick}\r\n                data-id={props.id}\r\n            >\r\n                {props.children}\r\n            </button>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport Button from '../Buttons';\r\n\r\nconst BookCard = ({ image, id, title, authors, description, link, handleSave, handleDelete }) => {\r\n    if (handleSave) {\r\n        return (\r\n            <>\r\n                <div className=\"card mb-3\" style={{ maxWidth: \"540px\" }}>\r\n                    <div className=\"row no-gutters\">\r\n                        <div className=\"col-md-4\">\r\n                            <img src={image} className=\"card-img\" alt={title} />\r\n                        </div>\r\n                        <div className=\"col-md-8\">\r\n                            <div className=\"card-body\">\r\n                                <h5 className=\"card-title\">Title: {title}</h5>\r\n                                <p className=\"card-text\"><span className=\"font-weight-bold\">Author(s):</span> {authors}</p>\r\n                                <p className=\"card-text\">{description}</p>\r\n                                <br />\r\n                                <div className=\"mx-auto\">\r\n                                    <Button href={link}>Check it out</Button>\r\n                                    <Button\r\n                                        type=\"btn btn-success btn-lg btn-block\"\r\n                                        id={id}\r\n                                        onClick={(event) => handleSave(event)}\r\n                                    >Save\r\n                                </Button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n    else {\r\n        return (\r\n            <>\r\n                <div className=\"card mb-3\" style={{ maxWidth: \"540px\" }}>\r\n                    <div className=\"row no-gutters\">\r\n                        <div className=\"col-md-4\">\r\n                            <img src={image} className=\"card-img\" alt={title} />\r\n                        </div>\r\n                        <div className=\"col-md-8\">\r\n                            <div className=\"card-body\">\r\n                                <h5 className=\"card-title\">Title: {title}</h5>\r\n                                <p className=\"card-text\"><span className=\"font-weight-bold\">Author(s):</span> {authors}</p>\r\n                                <p className=\"card-text\">{description}</p>\r\n                                <br />\r\n                                <div className=\"mx-auto\">\r\n                                    <Button\r\n                                        type=\"btn btn-danger btn-lg btn-block\"\r\n                                        id={id}\r\n                                        onClick={(event) => handleDelete(event)}\r\n                                    >Delete\r\n                                </Button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BookCard;","import axios from \"axios\"\r\n\r\nexport default {\r\n\r\n    // Get book from google search \r\n    getBooksFromGoogle: function (query) {\r\n        return axios.get(\"https://www.googleapis.com/books/v1/volumes?q=\" + query)\r\n    },\r\n\r\n    // Gets all books\r\n    getBooks: function () {\r\n        return axios.get(\"/api/books\");\r\n    },\r\n\r\n    // Save book to MongoDB\r\n    saveBook: function (bookToSave) {\r\n        return axios.post(\"/api/books\", bookToSave);\r\n    },\r\n\r\n    // Delete book from MongoDB\r\n    deleteBook: function (id) {\r\n        return axios.delete(\"/api/books/\" + id);\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport NavBar from '../components/NavBar';\r\nimport Jumbotron from '../components/Jumbotron';\r\nimport SearchBar from '../components/SearchBar';\r\nimport BookCard from '../components/BookCard';\r\nimport API from '../utils/API';\r\n\r\nconst Home = () => {\r\n    const [savedBooks, setSavedBooks] = useState([]);\r\n    const [results, setResults] = useState([]);\r\n    const [title, setTitle] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        API.getBooks().then(res => setSavedBooks(res.data))\r\n    }, [savedBooks]);\r\n\r\n    const handleInputChange = event => { setTitle(event.target.value) }\r\n\r\n    const handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        API.getBooksFromGoogle(title)\r\n            .then(res => setResults(res.data.items))\r\n            .catch(err => { throw err })\r\n    }\r\n\r\n    const handleSave = async (event) => {\r\n        event.preventDefault();\r\n        const bookID = event.target.getAttribute(\"data-id\");\r\n        const targetBook = results.filter(book => book.id === bookID);\r\n        const bookToSave = {\r\n            title: targetBook[0].volumeInfo.title,\r\n            authors: targetBook[0].volumeInfo.authors,\r\n            description: targetBook[0].volumeInfo.description,\r\n            image: targetBook[0].volumeInfo.imageLinks.thumbnail,\r\n            link: targetBook[0].volumeInfo.infoLink\r\n        }\r\n\r\n        if (savedBooks[bookID]) { console.log(\"Book already saved\") }\r\n        else {\r\n            let newState = savedBooks.push(bookToSave)\r\n            setSavedBooks(newState);\r\n            API.saveBook(bookToSave)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <NavBar />\r\n            <br />\r\n            <Jumbotron />\r\n            <SearchBar\r\n                handleInputChange={handleInputChange}\r\n                handleFormSubmit={handleFormSubmit}\r\n            />\r\n            <br />\r\n            <div className=\" container search_results\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-1\"></div>\r\n                    <div className=\"col-10\">\r\n                        {results.map((book) => {\r\n                            return (\r\n                                < BookCard\r\n                                    key={book.id}\r\n                                    id={book.id}\r\n                                    title={book.volumeInfo.title}\r\n                                    authors={book.volumeInfo.authors}\r\n                                    description={book.volumeInfo.description}\r\n                                    image={book.volumeInfo.imageLinks.thumbnail}\r\n                                    link={book.volumeInfo.canonicalVolumeLink}\r\n                                    handleSave={handleSave}\r\n                                />)\r\n                        })}\r\n                    </div>\r\n                    <div className=\"col-1\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import React, { useState, useEffect } from 'react';\r\nimport NavBar from '../components/NavBar';\r\nimport Jumbotron from '../components/Jumbotron';\r\nimport BookCard from '../components/BookCard';\r\nimport API from '../utils/API';\r\n\r\nconst Saved = () => {\r\n    const [savedBooks, setSavedBooks] = useState([]);\r\n\r\n    useEffect(() => {\r\n        API.getBooks().then(res => setSavedBooks(res.data))\r\n    }, [savedBooks]);\r\n\r\n    const handleDelete = (event) => {\r\n        event.preventDefault();\r\n        const bookID = event.target.getAttribute('data-id');\r\n\r\n        API.deleteBook(bookID)\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <NavBar />\r\n            <br />\r\n            <Jumbotron />\r\n            <br />\r\n            <div className=\" container search_results\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-1\"></div>\r\n                    <div className=\"col-10\">\r\n                        {savedBooks.map((book) => {\r\n                            return (\r\n                                < BookCard\r\n                                    key={book._id}\r\n                                    id={book._id}\r\n                                    title={book.title}\r\n                                    authors={book.authors}\r\n                                    description={book.description}\r\n                                    image={book.image}\r\n                                    link={book.link}\r\n                                    handleDelete={handleDelete}\r\n                                />)\r\n                        })}\r\n                    </div>\r\n                    <div className=\"col-1\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Saved","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Home from './pages/Home';\r\nimport Saved from './pages/Saved';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/saved\" component={Saved} />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === \"[::1]\" ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been pre-cached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}